name: Build tippecanoe artifact

on:
  push:
    branches:
      - main
  schedule:
    - cron: "42 5 * * 1"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: check version
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Fetch the latest tag from the felt/tippecanoe repository
          TAG=$(gh release list --exclude-drafts --exclude-pre-releases -R felt/tippecanoe --json tagName --jq ".[0].tagName")
          echo "TAG = $TAG"
          
          if [[ -z "$TAG" ]]; then
            echo "Error: No tags found in felt/tippecanoe repository."
            exit 1
          fi

          echo "TAG=$TAG" >> "$GITHUB_ENV"

          # Check if the tag exists in michaelkreil/tippecanoe-action
          if gh release view -R michaelkreil/tippecanoe-action "$TAG" > /dev/null 2>&1; then
            echo "IS_NEW_VERSION=0" >> "$GITHUB_ENV"
            echo "no new version found, aborting"
          else
            echo "IS_NEW_VERSION=1" >> "$GITHUB_ENV"
            echo "new version found, building"
          fi

      - name: build tippecanoe
        if: env.IS_NEW_VERSION == '1'
        run: |
          sudo apt-get install -y gcc g++ make libsqlite3-dev zlib1g-dev
          curl -L "https://github.com/felt/tippecanoe/archive/refs/tags/$TAG.tar.gz" | tar xz
          cd "tippecanoe-$TAG"
          make -j
          tar -czf ~/tippecanoe.tar.gz tile-join tippecanoe tippecanoe-enumerate tippecanoe-decode tippecanoe-json-tool tippecanoe-overzoom

      - name: upload binary
        if: env.IS_NEW_VERSION == '1'
        env:
          TAG: ${{ env.TAG }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create a (latest) release, ignoring error if it already exists
          gh release create --latest --title "$TAG" "$TAG" || true

          # Upload artifact to the release
          gh release upload "$TAG" ~/tippecanoe.tar.gz